{"ast":null,"code":"import { createLogic } from \"redux-logic\";\nimport { ERROR_SEARCH, GET_AIRLINES, GET_AIRPORTS, GET_FLIGHTS_FROM_A_TO_R, GET_TRAVELS, ON_CLICK_SEARCH, REJECT_SEARCH, STORED_AIRLINES, STORED_AIRPORTS, STORED_FLIGHTS_FROM_A_TO_R } from \"../Constants/FlightConstants\";\nimport { Services } from \"../Network/Services/API\";\nimport { HTTP_CODE_STATUS_SUCCESS } from \"../Constants/NetworkConstants\";\nimport { errorSearch, getFlightsFromAtoR, storedAirlines, storedAirports, storedFlightsFromAtoR } from \"../Actions/FlightActions\";\nimport { getTravel } from \"../../Utils/FlightUtils\";\nconst GetAirportsManager = createLogic({\n  type: [GET_AIRPORTS],\n\n  async process(_ref, dispatch, done) {\n    let {\n      action,\n      getState\n    } = _ref;\n\n    try {\n      const {\n        data,\n        status\n      } = await Services.getAirports();\n\n      if (status === HTTP_CODE_STATUS_SUCCESS) {\n        dispatch(storedAirports(data));\n      } else {\n        console.log(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    done();\n  }\n\n});\nconst StoredAirportsManager = createLogic({\n  type: [STORED_AIRPORTS],\n\n  transform(_ref2, next) {\n    let {\n      getState,\n      action\n    } = _ref2;\n    const {\n      response = {}\n    } = action;\n    const {\n      data = []\n    } = response;\n    return next({ ...action,\n      data\n    });\n  }\n\n});\nconst OnClickSearchManager = createLogic({\n  type: [ON_CLICK_SEARCH],\n\n  validate(_ref3, allow, reject) {\n    let {\n      getState,\n      action\n    } = _ref3;\n    const {\n      departureValue = {},\n      arrivalValue = {}\n    } = action;\n\n    if (departureValue.airport === 'Departure' || arrivalValue.airport === 'Arrival' || arrivalValue.airport === undefined || departureValue.airport === undefined) {\n      reject({\n        type: REJECT_SEARCH\n      });\n    } else {\n      allow(action);\n    }\n  },\n\n  process(_ref4, dispatch, done) {\n    let {\n      action,\n      getState\n    } = _ref4;\n    const {\n      departureValue = {},\n      arrivalValue = {}\n    } = action;\n\n    if (departureValue.airport === arrivalValue.airport) {\n      dispatch(errorSearch('Partenza e Arrivo non possono coincidere!!'));\n    } else {\n      dispatch(getFlightsFromAtoR(departureValue.airport, arrivalValue.airport));\n    }\n\n    done();\n  }\n\n});\nconst ErrorSearchManager = createLogic({\n  type: [ERROR_SEARCH],\n\n  transform(_ref5, next) {\n    let {\n      getState,\n      action\n    } = _ref5;\n    const {\n      error = ''\n    } = action;\n    return next({ ...action,\n      error\n    });\n  }\n\n});\nconst GetFlightsFromAToRManager = createLogic({\n  type: [GET_FLIGHTS_FROM_A_TO_R],\n\n  async process(_ref6, dispatch, done) {\n    let {\n      action,\n      getState\n    } = _ref6;\n    const {\n      departureIATA = '',\n      arrivalIATA = ''\n    } = action;\n\n    try {\n      const {\n        data,\n        status\n      } = await Services.getFlightsFromAToR(departureIATA, arrivalIATA);\n\n      if (status === HTTP_CODE_STATUS_SUCCESS) {\n        dispatch(storedFlightsFromAtoR(data));\n      } else {\n        console.log(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    done();\n  }\n\n});\nconst StoredFlightsFromAtoRManager = createLogic({\n  type: [STORED_FLIGHTS_FROM_A_TO_R],\n\n  transform(_ref7, next) {\n    let {\n      getState,\n      action\n    } = _ref7;\n    const {\n      response = {}\n    } = action;\n    const {\n      data = []\n    } = response;\n    return next({ ...action,\n      data\n    });\n  }\n\n});\nconst GetAirlinesManager = createLogic({\n  type: [GET_AIRLINES],\n\n  async process(_ref8, dispatch, done) {\n    let {\n      action,\n      getState\n    } = _ref8;\n\n    try {\n      const {\n        data,\n        status\n      } = await Services.getAirlines();\n\n      if (status === HTTP_CODE_STATUS_SUCCESS) {\n        dispatch(storedAirlines(data));\n      } else {\n        console.log(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    done();\n  }\n\n});\nconst StoredAirlinesManager = createLogic({\n  type: [STORED_AIRLINES],\n\n  transform(_ref9, next) {\n    let {\n      getState,\n      action\n    } = _ref9;\n    const {\n      response = {}\n    } = action;\n    const {\n      data = []\n    } = response;\n    return next({ ...action,\n      data\n    });\n  }\n\n});\nconst GetTravelsManager = createLogic({\n  type: [GET_TRAVELS],\n\n  transform(_ref10, next) {\n    let {\n      getState,\n      action\n    } = _ref10;\n    const {\n      airportList = {},\n      flyerList = {},\n      airlines = {}\n    } = getState().flightReducers;\n    let newTravel;\n    newTravel = getTravel(flyerList, airportList, airlines);\n    return next({ ...action,\n      travels: newTravel\n    });\n  }\n\n});\nexport const FlightManagers = [GetAirportsManager, StoredAirportsManager, OnClickSearchManager, ErrorSearchManager, GetFlightsFromAToRManager, StoredFlightsFromAtoRManager, GetAirlinesManager, StoredAirlinesManager, GetTravelsManager];","map":{"version":3,"sources":["/Users/aaronkaspar/Desktop/Mexiko/Modules/DAW/VisualStudio/Flight-main/src/Core/Logic/FlightManagers.js"],"names":["createLogic","ERROR_SEARCH","GET_AIRLINES","GET_AIRPORTS","GET_FLIGHTS_FROM_A_TO_R","GET_TRAVELS","ON_CLICK_SEARCH","REJECT_SEARCH","STORED_AIRLINES","STORED_AIRPORTS","STORED_FLIGHTS_FROM_A_TO_R","Services","HTTP_CODE_STATUS_SUCCESS","errorSearch","getFlightsFromAtoR","storedAirlines","storedAirports","storedFlightsFromAtoR","getTravel","GetAirportsManager","type","process","dispatch","done","action","getState","data","status","getAirports","console","log","error","StoredAirportsManager","transform","next","response","OnClickSearchManager","validate","allow","reject","departureValue","arrivalValue","airport","undefined","ErrorSearchManager","GetFlightsFromAToRManager","departureIATA","arrivalIATA","getFlightsFromAToR","StoredFlightsFromAtoRManager","GetAirlinesManager","getAirlines","StoredAirlinesManager","GetTravelsManager","airportList","flyerList","airlines","flightReducers","newTravel","travels","FlightManagers"],"mappings":"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","sourcesContent":["import {createLogic} from \"redux-logic\";\nimport {\n  ERROR_SEARCH, GET_AIRLINES,\n  GET_AIRPORTS, GET_FLIGHTS_FROM_A_TO_R, GET_TRAVELS,\n  ON_CLICK_SEARCH,\n  REJECT_SEARCH, STORED_AIRLINES,\n  STORED_AIRPORTS, STORED_FLIGHTS_FROM_A_TO_R\n} from \"../Constants/FlightConstants\";\nimport {Services} from \"../Network/Services/API\";\nimport {HTTP_CODE_STATUS_SUCCESS} from \"../Constants/NetworkConstants\";\nimport {\n  errorSearch,\n  getFlightsFromAtoR,\n  storedAirlines,\n  storedAirports,\n  storedFlightsFromAtoR\n} from \"../Actions/FlightActions\";\nimport {getTravel} from \"../../Utils/FlightUtils\";\n\nconst GetAirportsManager = createLogic({\n  type: [GET_AIRPORTS],\n  async process({action, getState}, dispatch, done) {\n    try {\n\n      const {data, status} = await Services.getAirports();\n\n      if (status === HTTP_CODE_STATUS_SUCCESS) {\n        dispatch(storedAirports(data));\n\n      } else {\n        console.log(data);\n      }\n\n    } catch (error) {\n      console.log(error);\n\n    }\n    done();\n  }\n});\n\nconst StoredAirportsManager = createLogic({\n  type: [STORED_AIRPORTS],\n\n  transform({getState, action}, next) {\n\n    const {response = {}} = action\n    const {data = []} = response;\n\n    return next({\n      ...action,\n      data,\n    });\n  }\n});\n\n\nconst OnClickSearchManager = createLogic({\n  type: [ON_CLICK_SEARCH],\n  validate({getState, action}, allow, reject) {\n    const {departureValue = {}, arrivalValue = {}} = action;\n    if (departureValue.airport === 'Departure' || arrivalValue.airport === 'Arrival' || arrivalValue.airport === undefined || departureValue.airport === undefined) {\n\n      reject({type: REJECT_SEARCH});\n    } else {\n      allow(action);\n    }\n  },\n\n  process({action, getState}, dispatch, done) {\n    const {departureValue = {}, arrivalValue = {}} = action;\n    if (departureValue.airport === arrivalValue.airport) {\n      dispatch(errorSearch('Partenza e Arrivo non possono coincidere!!'))\n    } else {\n      dispatch(getFlightsFromAtoR(departureValue.airport, arrivalValue.airport));\n    }\n\n    done();\n  }\n\n});\n\nconst ErrorSearchManager = createLogic({\n  type: [ERROR_SEARCH],\n\n  transform({getState, action}, next) {\n\n    const {error = ''} = action\n    return next({\n      ...action,\n      error\n    });\n  }\n});\n\nconst GetFlightsFromAToRManager = createLogic({\n  type: [GET_FLIGHTS_FROM_A_TO_R],\n  async process({action, getState}, dispatch, done) {\n\n    const {departureIATA = '', arrivalIATA = ''} = action;\n    try {\n\n      const {data, status} = await Services.getFlightsFromAToR(departureIATA, arrivalIATA);\n\n      if (status === HTTP_CODE_STATUS_SUCCESS) {\n\n        dispatch(storedFlightsFromAtoR(data));\n      } else {\n        console.log(data);\n      }\n\n    } catch (error) {\n      console.log(error);\n\n    }\n    done();\n  }\n});\n\n\nconst StoredFlightsFromAtoRManager = createLogic({\n  type: [STORED_FLIGHTS_FROM_A_TO_R],\n\n  transform({getState, action}, next) {\n\n    const {response = {}} = action\n    const {data = []} = response;\n\n    return next({\n      ...action,\n      data,\n    });\n  }\n});\n\n\nconst GetAirlinesManager = createLogic({\n  type: [GET_AIRLINES],\n  async process({action, getState}, dispatch, done) {\n\n    try {\n\n      const {data, status} = await Services.getAirlines();\n\n      if (status === HTTP_CODE_STATUS_SUCCESS) {\n        dispatch(storedAirlines(data));\n\n      } else {\n        console.log(data);\n      }\n\n    } catch (error) {\n      console.log(error);\n\n    }\n    done();\n  }\n});\n\n\nconst StoredAirlinesManager = createLogic({\n  type: [STORED_AIRLINES],\n\n  transform({getState, action}, next) {\n    const {response = {}} = action\n    const {data = []} = response;\n\n    return next({\n      ...action,\n      data,\n    });\n  }\n});\n\n\nconst GetTravelsManager = createLogic({\n  type: [GET_TRAVELS],\n\n  transform({getState, action}, next) {\n\n    const { airportList = {}, flyerList = {}, airlines ={}} = getState().flightReducers;\n    let newTravel;\n    newTravel= getTravel(flyerList,airportList, airlines)\n\n    return next({\n      ...action,\n      travels: newTravel,\n    });\n  }\n});\n\n\nexport const FlightManagers = [\n  GetAirportsManager,\n  StoredAirportsManager,\n  OnClickSearchManager,\n  ErrorSearchManager,\n  GetFlightsFromAToRManager,\n  StoredFlightsFromAtoRManager,\n  GetAirlinesManager,\n  StoredAirlinesManager,\n  GetTravelsManager\n];"]},"metadata":{},"sourceType":"module"}