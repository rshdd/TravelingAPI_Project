{"ast":null,"code":"import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.sub\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Subject, BehaviorSubject } from 'rxjs';\nimport { filter, map, scan, takeWhile } from 'rxjs/operators';\nimport wrapper from './logicWrapper';\nimport { identityFn, stringifyType } from './utils';\n\nvar debug = function debug()\n/* ...args */\n{};\n\nvar OP_INIT = 'init'; // initial monitor op before anything else\n\n/**\n   Builds a redux middleware for handling logic (created with\n   createLogic). It also provides a way to inject runtime dependencies\n   that will be provided to the logic for use during its execution hooks.\n\n   This middleware has two additional methods:\n     - `addLogic(arrLogic)` adds additional logic dynamically\n     - `replaceLogic(arrLogic)` replaces all logic, existing logic should still complete\n\n   @param {array} arrLogic array of logic items (each created with\n     createLogic) used in the middleware. The order in the array\n     indicates the order they will be called in the middleware.\n   @param {object} deps optional runtime dependencies that will be\n     injected into the logic hooks. Anything from config to instances\n     of objects or connections can be provided here. This can simply\n     testing. Reserved property names: getState, action, and ctx.\n   @returns {function} redux middleware with additional methods\n     addLogic and replaceLogic\n */\n\nexport default function createLogicMiddleware() {\n  var arrLogic = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!Array.isArray(arrLogic)) {\n    throw new Error('createLogicMiddleware needs to be called with an array of logic items');\n  }\n\n  var duplicateLogic = findDuplicates(arrLogic);\n\n  if (duplicateLogic.length) {\n    throw new Error(\"duplicate logic, indexes: \".concat(duplicateLogic));\n  }\n\n  var actionSrc$ = new Subject(); // mw action stream\n\n  var monitor$ = new Subject(); // monitor all activity\n\n  var lastPending$ = new BehaviorSubject({\n    op: OP_INIT\n  });\n  monitor$.pipe(scan(function (acc, x) {\n    // append a pending logic count\n    var pending = acc.pending || 0;\n\n    switch (x.op) {\n      // eslint-disable-line default-case\n      case 'top': // action at top of logic stack\n\n      case 'begin':\n        // starting into a logic\n        pending += 1;\n        break;\n\n      case 'end': // completed from a logic\n\n      case 'bottom': // action cleared bottom of logic stack\n\n      case 'nextDisp': // action changed type and dispatched\n\n      case 'filtered': // action filtered\n\n      case 'dispatchError': // error when dispatching\n\n      case 'cancelled':\n        // action cancelled before intercept complete\n        // dispCancelled is not included here since\n        // already accounted for in the 'end' op\n        pending -= 1;\n        break;\n    }\n\n    return _objectSpread({}, x, {\n      pending: pending\n    });\n  }, {\n    pending: 0\n  })).subscribe(lastPending$); // pipe to lastPending\n\n  var savedStore;\n  var savedNext;\n  var actionEnd$;\n  var logicSub;\n  var logicCount = 0; // used for implicit naming\n\n  var savedLogicArr = arrLogic; // keep for uniqueness check\n\n  function mw(store) {\n    if (savedStore && savedStore !== store) {\n      throw new Error('cannot assign logicMiddleware instance to multiple stores, create separate instance for each');\n    }\n\n    savedStore = store;\n    return function (next) {\n      savedNext = next;\n\n      var _applyLogic = applyLogic(arrLogic, savedStore, savedNext, logicSub, actionSrc$, deps, logicCount, monitor$),\n          action$ = _applyLogic.action$,\n          sub = _applyLogic.sub,\n          cnt = _applyLogic.logicCount;\n\n      actionEnd$ = action$;\n      logicSub = sub;\n      logicCount = cnt;\n      return function (action) {\n        debug('starting off', action);\n        monitor$.next({\n          action: action,\n          op: 'top'\n        });\n        actionSrc$.next(action);\n        return action;\n      };\n    };\n  }\n  /**\n    observable to monitor flow in logic\n    */\n\n\n  mw.monitor$ = monitor$;\n  /**\n     Resolve promise when all in-flight actions are complete passing\n     through fn if provided\n     @param {function} fn optional fn() which is invoked on completion\n     @return {promise} promise resolves when all are complete\n    */\n\n  mw.whenComplete = function whenComplete() {\n    var fn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : identityFn;\n    return lastPending$.pipe( // tap(x => console.log('wc', x)), /* keep commented out */\n    takeWhile(function (x) {\n      return x.pending;\n    }), map(function () {\n      return (\n        /* x */\n        undefined\n      );\n    }) // not passing along anything\n    ).toPromise().then(fn);\n  };\n  /**\n     add additional deps after createStore has been run. Useful for\n     dynamically injecting dependencies for the hooks. Throws an error\n     if it tries to override an existing dependency with a new\n     value or instance.\n     @param {object} additionalDeps object of dependencies to add\n     @return {undefined}\n    */\n\n\n  mw.addDeps = function addDeps(additionalDeps) {\n    if (_typeof(additionalDeps) !== 'object') {\n      throw new Error('addDeps should be called with an object');\n    }\n\n    Object.keys(additionalDeps).forEach(function (k) {\n      var existing = deps[k];\n      var newValue = additionalDeps[k];\n\n      if (typeof existing !== 'undefined' && // previously existing dep\n      existing !== newValue) {\n        // no override\n        throw new Error(\"addDeps cannot override an existing dep value: \".concat(k));\n      } // eslint-disable-next-line no-param-reassign\n\n\n      deps[k] = newValue;\n    });\n  };\n  /**\n    add logic after createStore has been run. Useful for dynamically\n    loading bundles at runtime. Existing state in logic is preserved.\n    @param {array} arrNewLogic array of logic items to add\n    @return {object} object with a property logicCount set to the count of logic items\n   */\n\n\n  mw.addLogic = function addLogic(arrNewLogic) {\n    if (!arrNewLogic.length) {\n      return {\n        logicCount: logicCount\n      };\n    }\n\n    var combinedLogic = savedLogicArr.concat(arrNewLogic);\n    var duplicateLogic = findDuplicates(combinedLogic);\n\n    if (duplicateLogic.length) {\n      throw new Error(\"duplicate logic, indexes: \".concat(duplicateLogic));\n    }\n\n    var _applyLogic2 = applyLogic(arrNewLogic, savedStore, savedNext, logicSub, actionEnd$, deps, logicCount, monitor$),\n        action$ = _applyLogic2.action$,\n        sub = _applyLogic2.sub,\n        cnt = _applyLogic2.logicCount;\n\n    actionEnd$ = action$;\n    logicSub = sub;\n    logicCount = cnt;\n    savedLogicArr = combinedLogic;\n    debug('added logic');\n    return {\n      logicCount: cnt\n    };\n  };\n\n  mw.mergeNewLogic = function mergeNewLogic(arrMergeLogic) {\n    // check for duplicates within the arrMergeLogic first\n    var duplicateLogic = findDuplicates(arrMergeLogic);\n\n    if (duplicateLogic.length) {\n      throw new Error(\"duplicate logic, indexes: \".concat(duplicateLogic));\n    } // filter out any refs that match existing logic, then addLogic\n\n\n    var arrNewLogic = arrMergeLogic.filter(function (x) {\n      return savedLogicArr.indexOf(x) === -1;\n    });\n    return mw.addLogic(arrNewLogic);\n  };\n  /**\n   replace all existing logic with a new array of logic.\n   In-flight requests should complete. Logic state will be reset.\n   @param {array} arrRepLogic array of replacement logic items\n   @return {object} object with a property logicCount set to the count of logic items\n   */\n\n\n  mw.replaceLogic = function replaceLogic(arrRepLogic) {\n    var duplicateLogic = findDuplicates(arrRepLogic);\n\n    if (duplicateLogic.length) {\n      throw new Error(\"duplicate logic, indexes: \".concat(duplicateLogic));\n    }\n\n    var _applyLogic3 = applyLogic(arrRepLogic, savedStore, savedNext, logicSub, actionSrc$, deps, 0, monitor$),\n        action$ = _applyLogic3.action$,\n        sub = _applyLogic3.sub,\n        cnt = _applyLogic3.logicCount;\n\n    actionEnd$ = action$;\n    logicSub = sub;\n    logicCount = cnt;\n    savedLogicArr = arrRepLogic;\n    debug('replaced logic');\n    return {\n      logicCount: cnt\n    };\n  };\n\n  return mw;\n}\n\nfunction applyLogic(arrLogic, store, next, sub, actionIn$, deps, startLogicCount, monitor$) {\n  if (!store || !next) {\n    throw new Error('store is not defined');\n  }\n\n  if (sub) {\n    sub.unsubscribe();\n  }\n\n  var wrappedLogic = arrLogic.map(function (logic, idx) {\n    var namedLogic = naming(logic, idx + startLogicCount);\n    return wrapper(namedLogic, store, deps, monitor$);\n  });\n  var actionOut$ = wrappedLogic.reduce(function (acc$, wep) {\n    return wep(acc$);\n  }, actionIn$);\n  var newSub = actionOut$.subscribe(function (action) {\n    debug('actionEnd$', action);\n\n    try {\n      var result = next(action);\n      debug('result', result);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('error in mw dispatch or next call, probably in middlware/reducer/render fn:', err);\n      var msg = err && err.message ? err.message : err;\n      monitor$.next({\n        action: action,\n        err: msg,\n        op: 'nextError'\n      });\n    } // at this point, action is the transformed action, not original\n\n\n    monitor$.next({\n      nextAction: action,\n      op: 'bottom'\n    });\n  });\n  return {\n    action$: actionOut$,\n    sub: newSub,\n    logicCount: startLogicCount + arrLogic.length\n  };\n}\n/**\n * Implement default names for logic using type and idx\n * @param {object} logic named or unnamed logic object\n * @param {number} idx  index in the logic array\n * @return {object} namedLogic named logic\n */\n\n\nfunction naming(logic, idx) {\n  if (logic.name) {\n    return logic;\n  }\n\n  return _objectSpread({}, logic, {\n    name: \"L(\".concat(stringifyType(logic.type), \")-\").concat(idx)\n  });\n}\n/**\n  Find duplicates in arrLogic by checking if ref to same logic object\n  @param {array} arrLogic array of logic to check\n  @return {array} array of indexes to duplicates, empty array if none\n */\n\n\nfunction findDuplicates(arrLogic) {\n  return arrLogic.reduce(function (acc, x1, idx1) {\n    if (arrLogic.some(function (x2, idx2) {\n      return idx1 !== idx2 && x1 === x2;\n    })) {\n      acc.push(idx1);\n    }\n\n    return acc;\n  }, []);\n}","map":{"version":3,"sources":["/Users/aaronkaspar/Desktop/Mexiko/Modules/DAW/VisualStudio/Flight-main/node_modules/redux-logic/build-es/createLogicMiddleware.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","value","defineProperty","configurable","writable","Subject","BehaviorSubject","map","scan","takeWhile","wrapper","identityFn","stringifyType","debug","OP_INIT","createLogicMiddleware","arrLogic","undefined","deps","Array","isArray","Error","duplicateLogic","findDuplicates","actionSrc$","monitor$","lastPending$","op","pipe","acc","x","pending","subscribe","savedStore","savedNext","actionEnd$","logicSub","logicCount","savedLogicArr","mw","store","next","_applyLogic","applyLogic","action$","sub","cnt","action","whenComplete","fn","toPromise","then","addDeps","additionalDeps","k","existing","newValue","addLogic","arrNewLogic","combinedLogic","_applyLogic2","mergeNewLogic","arrMergeLogic","indexOf","replaceLogic","arrRepLogic","_applyLogic3","actionIn$","startLogicCount","unsubscribe","wrappedLogic","logic","idx","namedLogic","naming","actionOut$","reduce","acc$","wep","newSub","result","err","console","error","msg","message","nextAction","name","type","x1","idx1","some","x2","idx2","push"],"mappings":"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","sourcesContent":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.sub\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Subject, BehaviorSubject } from 'rxjs';\nimport { filter, map, scan, takeWhile } from 'rxjs/operators';\nimport wrapper from './logicWrapper';\nimport { identityFn, stringifyType } from './utils';\n\nvar debug = function debug()\n/* ...args */\n{};\n\nvar OP_INIT = 'init'; // initial monitor op before anything else\n\n/**\n   Builds a redux middleware for handling logic (created with\n   createLogic). It also provides a way to inject runtime dependencies\n   that will be provided to the logic for use during its execution hooks.\n\n   This middleware has two additional methods:\n     - `addLogic(arrLogic)` adds additional logic dynamically\n     - `replaceLogic(arrLogic)` replaces all logic, existing logic should still complete\n\n   @param {array} arrLogic array of logic items (each created with\n     createLogic) used in the middleware. The order in the array\n     indicates the order they will be called in the middleware.\n   @param {object} deps optional runtime dependencies that will be\n     injected into the logic hooks. Anything from config to instances\n     of objects or connections can be provided here. This can simply\n     testing. Reserved property names: getState, action, and ctx.\n   @returns {function} redux middleware with additional methods\n     addLogic and replaceLogic\n */\n\nexport default function createLogicMiddleware() {\n  var arrLogic = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!Array.isArray(arrLogic)) {\n    throw new Error('createLogicMiddleware needs to be called with an array of logic items');\n  }\n\n  var duplicateLogic = findDuplicates(arrLogic);\n\n  if (duplicateLogic.length) {\n    throw new Error(\"duplicate logic, indexes: \".concat(duplicateLogic));\n  }\n\n  var actionSrc$ = new Subject(); // mw action stream\n\n  var monitor$ = new Subject(); // monitor all activity\n\n  var lastPending$ = new BehaviorSubject({\n    op: OP_INIT\n  });\n  monitor$.pipe(scan(function (acc, x) {\n    // append a pending logic count\n    var pending = acc.pending || 0;\n\n    switch (x.op) {\n      // eslint-disable-line default-case\n      case 'top': // action at top of logic stack\n\n      case 'begin':\n        // starting into a logic\n        pending += 1;\n        break;\n\n      case 'end': // completed from a logic\n\n      case 'bottom': // action cleared bottom of logic stack\n\n      case 'nextDisp': // action changed type and dispatched\n\n      case 'filtered': // action filtered\n\n      case 'dispatchError': // error when dispatching\n\n      case 'cancelled':\n        // action cancelled before intercept complete\n        // dispCancelled is not included here since\n        // already accounted for in the 'end' op\n        pending -= 1;\n        break;\n    }\n\n    return _objectSpread({}, x, {\n      pending: pending\n    });\n  }, {\n    pending: 0\n  })).subscribe(lastPending$); // pipe to lastPending\n\n  var savedStore;\n  var savedNext;\n  var actionEnd$;\n  var logicSub;\n  var logicCount = 0; // used for implicit naming\n\n  var savedLogicArr = arrLogic; // keep for uniqueness check\n\n  function mw(store) {\n    if (savedStore && savedStore !== store) {\n      throw new Error('cannot assign logicMiddleware instance to multiple stores, create separate instance for each');\n    }\n\n    savedStore = store;\n    return function (next) {\n      savedNext = next;\n\n      var _applyLogic = applyLogic(arrLogic, savedStore, savedNext, logicSub, actionSrc$, deps, logicCount, monitor$),\n          action$ = _applyLogic.action$,\n          sub = _applyLogic.sub,\n          cnt = _applyLogic.logicCount;\n\n      actionEnd$ = action$;\n      logicSub = sub;\n      logicCount = cnt;\n      return function (action) {\n        debug('starting off', action);\n        monitor$.next({\n          action: action,\n          op: 'top'\n        });\n        actionSrc$.next(action);\n        return action;\n      };\n    };\n  }\n  /**\n    observable to monitor flow in logic\n    */\n\n\n  mw.monitor$ = monitor$;\n  /**\n     Resolve promise when all in-flight actions are complete passing\n     through fn if provided\n     @param {function} fn optional fn() which is invoked on completion\n     @return {promise} promise resolves when all are complete\n    */\n\n  mw.whenComplete = function whenComplete() {\n    var fn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : identityFn;\n    return lastPending$.pipe( // tap(x => console.log('wc', x)), /* keep commented out */\n    takeWhile(function (x) {\n      return x.pending;\n    }), map(function () {\n      return (\n        /* x */\n        undefined\n      );\n    }) // not passing along anything\n    ).toPromise().then(fn);\n  };\n  /**\n     add additional deps after createStore has been run. Useful for\n     dynamically injecting dependencies for the hooks. Throws an error\n     if it tries to override an existing dependency with a new\n     value or instance.\n     @param {object} additionalDeps object of dependencies to add\n     @return {undefined}\n    */\n\n\n  mw.addDeps = function addDeps(additionalDeps) {\n    if (_typeof(additionalDeps) !== 'object') {\n      throw new Error('addDeps should be called with an object');\n    }\n\n    Object.keys(additionalDeps).forEach(function (k) {\n      var existing = deps[k];\n      var newValue = additionalDeps[k];\n\n      if (typeof existing !== 'undefined' && // previously existing dep\n      existing !== newValue) {\n        // no override\n        throw new Error(\"addDeps cannot override an existing dep value: \".concat(k));\n      } // eslint-disable-next-line no-param-reassign\n\n\n      deps[k] = newValue;\n    });\n  };\n  /**\n    add logic after createStore has been run. Useful for dynamically\n    loading bundles at runtime. Existing state in logic is preserved.\n    @param {array} arrNewLogic array of logic items to add\n    @return {object} object with a property logicCount set to the count of logic items\n   */\n\n\n  mw.addLogic = function addLogic(arrNewLogic) {\n    if (!arrNewLogic.length) {\n      return {\n        logicCount: logicCount\n      };\n    }\n\n    var combinedLogic = savedLogicArr.concat(arrNewLogic);\n    var duplicateLogic = findDuplicates(combinedLogic);\n\n    if (duplicateLogic.length) {\n      throw new Error(\"duplicate logic, indexes: \".concat(duplicateLogic));\n    }\n\n    var _applyLogic2 = applyLogic(arrNewLogic, savedStore, savedNext, logicSub, actionEnd$, deps, logicCount, monitor$),\n        action$ = _applyLogic2.action$,\n        sub = _applyLogic2.sub,\n        cnt = _applyLogic2.logicCount;\n\n    actionEnd$ = action$;\n    logicSub = sub;\n    logicCount = cnt;\n    savedLogicArr = combinedLogic;\n    debug('added logic');\n    return {\n      logicCount: cnt\n    };\n  };\n\n  mw.mergeNewLogic = function mergeNewLogic(arrMergeLogic) {\n    // check for duplicates within the arrMergeLogic first\n    var duplicateLogic = findDuplicates(arrMergeLogic);\n\n    if (duplicateLogic.length) {\n      throw new Error(\"duplicate logic, indexes: \".concat(duplicateLogic));\n    } // filter out any refs that match existing logic, then addLogic\n\n\n    var arrNewLogic = arrMergeLogic.filter(function (x) {\n      return savedLogicArr.indexOf(x) === -1;\n    });\n    return mw.addLogic(arrNewLogic);\n  };\n  /**\n   replace all existing logic with a new array of logic.\n   In-flight requests should complete. Logic state will be reset.\n   @param {array} arrRepLogic array of replacement logic items\n   @return {object} object with a property logicCount set to the count of logic items\n   */\n\n\n  mw.replaceLogic = function replaceLogic(arrRepLogic) {\n    var duplicateLogic = findDuplicates(arrRepLogic);\n\n    if (duplicateLogic.length) {\n      throw new Error(\"duplicate logic, indexes: \".concat(duplicateLogic));\n    }\n\n    var _applyLogic3 = applyLogic(arrRepLogic, savedStore, savedNext, logicSub, actionSrc$, deps, 0, monitor$),\n        action$ = _applyLogic3.action$,\n        sub = _applyLogic3.sub,\n        cnt = _applyLogic3.logicCount;\n\n    actionEnd$ = action$;\n    logicSub = sub;\n    logicCount = cnt;\n    savedLogicArr = arrRepLogic;\n    debug('replaced logic');\n    return {\n      logicCount: cnt\n    };\n  };\n\n  return mw;\n}\n\nfunction applyLogic(arrLogic, store, next, sub, actionIn$, deps, startLogicCount, monitor$) {\n  if (!store || !next) {\n    throw new Error('store is not defined');\n  }\n\n  if (sub) {\n    sub.unsubscribe();\n  }\n\n  var wrappedLogic = arrLogic.map(function (logic, idx) {\n    var namedLogic = naming(logic, idx + startLogicCount);\n    return wrapper(namedLogic, store, deps, monitor$);\n  });\n  var actionOut$ = wrappedLogic.reduce(function (acc$, wep) {\n    return wep(acc$);\n  }, actionIn$);\n  var newSub = actionOut$.subscribe(function (action) {\n    debug('actionEnd$', action);\n\n    try {\n      var result = next(action);\n      debug('result', result);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('error in mw dispatch or next call, probably in middlware/reducer/render fn:', err);\n      var msg = err && err.message ? err.message : err;\n      monitor$.next({\n        action: action,\n        err: msg,\n        op: 'nextError'\n      });\n    } // at this point, action is the transformed action, not original\n\n\n    monitor$.next({\n      nextAction: action,\n      op: 'bottom'\n    });\n  });\n  return {\n    action$: actionOut$,\n    sub: newSub,\n    logicCount: startLogicCount + arrLogic.length\n  };\n}\n/**\n * Implement default names for logic using type and idx\n * @param {object} logic named or unnamed logic object\n * @param {number} idx  index in the logic array\n * @return {object} namedLogic named logic\n */\n\n\nfunction naming(logic, idx) {\n  if (logic.name) {\n    return logic;\n  }\n\n  return _objectSpread({}, logic, {\n    name: \"L(\".concat(stringifyType(logic.type), \")-\").concat(idx)\n  });\n}\n/**\n  Find duplicates in arrLogic by checking if ref to same logic object\n  @param {array} arrLogic array of logic to check\n  @return {array} array of indexes to duplicates, empty array if none\n */\n\n\nfunction findDuplicates(arrLogic) {\n  return arrLogic.reduce(function (acc, x1, idx1) {\n    if (arrLogic.some(function (x2, idx2) {\n      return idx1 !== idx2 && x1 === x2;\n    })) {\n      acc.push(idx1);\n    }\n\n    return acc;\n  }, []);\n}"]},"metadata":{},"sourceType":"module"}