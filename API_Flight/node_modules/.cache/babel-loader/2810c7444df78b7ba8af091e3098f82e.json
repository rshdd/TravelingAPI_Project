{"ast":null,"code":"/* eslint-disable array-callback-return */\nimport { createHashHistory } from \"history\";\nimport { routerMiddleware, connectRouter } from \"connected-react-router\";\nimport * as axios from \"axios\";\nimport { createLogicMiddleware } from \"redux-logic\";\nimport { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nexport const initializeStore = function () {\n  let reducers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let managers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const history = createHashHistory({\n    hashType: \"hashbang\"\n  });\n  const reducerList = createReducerList(reducers);\n  const managerList = createLogicList(managers);\n  const {\n    enhancers,\n    routerReducer\n  } = initMiddleware(reducerList, managerList, history);\n  const reducerManager = combineReducers(routerReducer);\n  const store = createStore(reducerManager, enhancers);\n  return {\n    store,\n    history\n  };\n};\n\nconst createReducerList = reducers => {\n  let reducerList = [];\n  reducers.forEach(reducer => {\n    Object.keys(reducer).map(objectKey => {\n      let reducerFunction = reducer[objectKey];\n      reducerList[objectKey] = reducerWrapper(reducerFunction);\n    });\n  });\n  return reducerList;\n};\n\nconst createLogicList = managers => {\n  let managerList = [];\n  managers.forEach(manager => {\n    managerList.push(manager);\n  });\n  return managerList;\n}; // Initialized Middleware\n\n\nconst initMiddleware = (reducerList, managerList, history) => {\n  //Add Middleware to store\n  const storeMiddleware = routerMiddleware(history); //I Can Combine mor enhancer to store like: logic middleware, redux-route, ...\n\n  let enhancers;\n  const dependencies = {\n    httpClient: axios\n  }; // Apply middleware to Logic\n\n  const logicMiddleware = createLogicMiddleware(managerList, dependencies);\n\n  if (window.__REDUX_DEVTOOLS_EXTENSION__ === undefined) {\n    enhancers = compose(applyMiddleware(logicMiddleware), applyMiddleware(storeMiddleware));\n  } else {\n    enhancers = compose(applyMiddleware(logicMiddleware), applyMiddleware(storeMiddleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n  }\n\n  const routerReducer = {\n    router: connectRouter(history),\n    ...reducerList\n  };\n  return {\n    enhancers,\n    logicMiddleware,\n    routerReducer,\n    dependencies\n  };\n}; // Create Wrapper To manage Error from reducers\n\n\nconst reducerWrapper = reducerFunction => {\n  return function () {\n    try {\n      return reducerFunction.apply(this, arguments);\n    } catch (error) {\n      console.log(error);\n      return arguments[0];\n    }\n  };\n};","map":{"version":3,"sources":["/Users/aaronkaspar/Desktop/Mexiko/Modules/DAW/VisualStudio/Flight-main/src/Utils/CreateStoreUtils.js"],"names":["createHashHistory","routerMiddleware","connectRouter","axios","createLogicMiddleware","applyMiddleware","combineReducers","compose","createStore","initializeStore","reducers","managers","history","hashType","reducerList","createReducerList","managerList","createLogicList","enhancers","routerReducer","initMiddleware","reducerManager","store","forEach","reducer","Object","keys","map","objectKey","reducerFunction","reducerWrapper","manager","push","storeMiddleware","dependencies","httpClient","logicMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","undefined","router","apply","arguments","error","console","log"],"mappings":"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","sourcesContent":["/* eslint-disable array-callback-return */\nimport {createHashHistory} from \"history\";\nimport {routerMiddleware, connectRouter} from \"connected-react-router\";\nimport * as axios from \"axios\";\nimport {createLogicMiddleware} from \"redux-logic\";\nimport {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\n\nexport const initializeStore = (reducers = [], managers = []) => {\n\n    const history = createHashHistory({hashType: \"hashbang\"});\n    const reducerList = createReducerList(reducers);\n    const managerList = createLogicList(managers);\n\n    const {enhancers, routerReducer} = initMiddleware(reducerList, managerList, history);\n\n    const reducerManager = combineReducers(routerReducer);\n    const store = createStore(reducerManager, enhancers);\n\n    return {store, history};\n};\n\n\nconst createReducerList = (reducers) => {\n    let reducerList = [];\n    reducers.forEach(reducer => {\n        Object.keys(reducer).map((objectKey) => {\n            let reducerFunction = reducer[objectKey];\n            reducerList[objectKey] = reducerWrapper(reducerFunction);\n        })\n    });\n    return reducerList;\n};\n\n\nconst createLogicList = (managers) => {\n\n    let managerList = [];\n    managers.forEach(manager => {\n        managerList.push(manager);\n    });\n    return managerList\n};\n\n// Initialized Middleware\nconst initMiddleware = (reducerList, managerList, history) => {\n    //Add Middleware to store\n    const storeMiddleware = routerMiddleware(history);\n\n    //I Can Combine mor enhancer to store like: logic middleware, redux-route, ...\n    let enhancers;\n    const dependencies = {\n        httpClient: axios\n    };\n\n    // Apply middleware to Logic\n    const logicMiddleware = createLogicMiddleware(managerList, dependencies);\n    if (window.__REDUX_DEVTOOLS_EXTENSION__ === undefined) {\n        enhancers = compose(\n            applyMiddleware(logicMiddleware),\n            applyMiddleware(storeMiddleware),\n        );\n    } else {\n        enhancers = compose(\n            applyMiddleware(logicMiddleware),\n            applyMiddleware(storeMiddleware),\n            window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n        );\n    }\n\n    const routerReducer = {\n        router: connectRouter(history),\n        ...reducerList\n    };\n\n    return {enhancers, logicMiddleware, routerReducer, dependencies}\n};\n\n// Create Wrapper To manage Error from reducers\nconst reducerWrapper = (reducerFunction) => {\n    return function () {\n        try {\n            return reducerFunction.apply(this, arguments);\n        } catch (error) {\n            console.log(error);\n            return arguments[0];\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}