{"ast":null,"code":"import \"core-js/modules/es6.function.name\";\nimport { Subject, timer } from 'rxjs';\nimport { defaultIfEmpty, tap, take, takeUntil } from 'rxjs/operators';\nvar NODE_ENV = typeof window === 'undefined' && process && process.env && process.env.NODE_ENV ? process.env.NODE_ENV : ''; // returns { cancelled$, setInterceptComplete }\n\nexport default function createCancelled$(_ref) {\n  var action = _ref.action,\n      cancel$ = _ref.cancel$,\n      monitor$ = _ref.monitor$,\n      logic = _ref.logic;\n  var name = logic.name; // once action reaches bottom, filtered, nextDisp, or cancelled\n\n  var interceptComplete = false;\n\n  function setInterceptComplete() {\n    interceptComplete = true;\n  }\n\n  var cancelled$ = new Subject().pipe(take(1));\n\n  if (cancel$) {\n    cancel$.subscribe(cancelled$); // connect cancelled$ to cancel$\n\n    cancelled$.subscribe(function () {\n      if (!interceptComplete) {\n        monitor$.next({\n          action: action,\n          name: name,\n          op: 'cancelled'\n        });\n      } else {\n        // marking these different so not counted twice\n        monitor$.next({\n          action: action,\n          name: name,\n          op: 'dispCancelled'\n        });\n      }\n    });\n  }\n\n  createWarnTimeout({\n    logic: logic,\n    cancelled$: cancelled$\n  });\n  return {\n    cancelled$: cancelled$,\n    setInterceptComplete: setInterceptComplete\n  };\n}\n\nfunction createWarnTimeout(_ref2) {\n  var logic = _ref2.logic,\n      cancelled$ = _ref2.cancelled$;\n  var name = logic.name,\n      warnTimeout = logic.warnTimeout; // In non-production mode only we will setup a warning timeout that\n  // will console.error if logic has not completed by the time it fires\n  // warnTimeout can be set to 0 to disable\n\n  if (NODE_ENV !== 'production' && warnTimeout) {\n    timer(warnTimeout).pipe( // take until cancelled, errored, or completed\n    takeUntil(cancelled$.pipe(defaultIfEmpty(true))), tap(function () {\n      // eslint-disable-next-line no-console\n      console.error(\"warning: logic (\".concat(name, \") is still running after \").concat(warnTimeout / 1000, \"s, forget to call done()? For non-ending logic, set warnTimeout: 0\"));\n    })).subscribe();\n  }\n}","map":{"version":3,"sources":["/Users/aaronkaspar/Desktop/Mexiko/Modules/DAW/VisualStudio/Flight-main/node_modules/redux-logic/build-es/createCancelled$.js"],"names":["Subject","timer","defaultIfEmpty","tap","take","takeUntil","NODE_ENV","window","process","env","createCancelled$","_ref","action","cancel$","monitor$","logic","name","interceptComplete","setInterceptComplete","cancelled$","pipe","subscribe","next","op","createWarnTimeout","_ref2","warnTimeout","console","error","concat"],"mappings":"AAAA,OAAO,mCAAP;AACA,SAASA,OAAT,EAAkBC,KAAlB,QAA+B,MAA/B;AACA,SAASC,cAAT,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,SAApC,QAAqD,gBAArD;AACA,IAAIC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiCC,OAAjC,IAA4CA,OAAO,CAACC,GAApD,IAA2DD,OAAO,CAACC,GAAR,CAAYH,QAAvE,GAAkFE,OAAO,CAACC,GAAR,CAAYH,QAA9F,GAAyG,EAAxH,C,CAA4H;;AAE5H,eAAe,SAASI,gBAAT,CAA0BC,IAA1B,EAAgC;AAC7C,MAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,MACIC,OAAO,GAAGF,IAAI,CAACE,OADnB;AAAA,MAEIC,QAAQ,GAAGH,IAAI,CAACG,QAFpB;AAAA,MAGIC,KAAK,GAAGJ,IAAI,CAACI,KAHjB;AAIA,MAAIC,IAAI,GAAGD,KAAK,CAACC,IAAjB,CAL6C,CAKtB;;AAEvB,MAAIC,iBAAiB,GAAG,KAAxB;;AAEA,WAASC,oBAAT,GAAgC;AAC9BD,IAAAA,iBAAiB,GAAG,IAApB;AACD;;AAED,MAAIE,UAAU,GAAG,IAAInB,OAAJ,GAAcoB,IAAd,CAAmBhB,IAAI,CAAC,CAAD,CAAvB,CAAjB;;AAEA,MAAIS,OAAJ,EAAa;AACXA,IAAAA,OAAO,CAACQ,SAAR,CAAkBF,UAAlB,EADW,CACoB;;AAE/BA,IAAAA,UAAU,CAACE,SAAX,CAAqB,YAAY;AAC/B,UAAI,CAACJ,iBAAL,EAAwB;AACtBH,QAAAA,QAAQ,CAACQ,IAAT,CAAc;AACZV,UAAAA,MAAM,EAAEA,MADI;AAEZI,UAAAA,IAAI,EAAEA,IAFM;AAGZO,UAAAA,EAAE,EAAE;AAHQ,SAAd;AAKD,OAND,MAMO;AACL;AACAT,QAAAA,QAAQ,CAACQ,IAAT,CAAc;AACZV,UAAAA,MAAM,EAAEA,MADI;AAEZI,UAAAA,IAAI,EAAEA,IAFM;AAGZO,UAAAA,EAAE,EAAE;AAHQ,SAAd;AAKD;AACF,KAfD;AAgBD;;AAEDC,EAAAA,iBAAiB,CAAC;AAChBT,IAAAA,KAAK,EAAEA,KADS;AAEhBI,IAAAA,UAAU,EAAEA;AAFI,GAAD,CAAjB;AAIA,SAAO;AACLA,IAAAA,UAAU,EAAEA,UADP;AAELD,IAAAA,oBAAoB,EAAEA;AAFjB,GAAP;AAID;;AAED,SAASM,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,MAAIV,KAAK,GAAGU,KAAK,CAACV,KAAlB;AAAA,MACII,UAAU,GAAGM,KAAK,CAACN,UADvB;AAEA,MAAIH,IAAI,GAAGD,KAAK,CAACC,IAAjB;AAAA,MACIU,WAAW,GAAGX,KAAK,CAACW,WADxB,CAHgC,CAIK;AACrC;AACA;;AAEA,MAAIpB,QAAQ,KAAK,YAAb,IAA6BoB,WAAjC,EAA8C;AAC5CzB,IAAAA,KAAK,CAACyB,WAAD,CAAL,CAAmBN,IAAnB,EAAyB;AACzBf,IAAAA,SAAS,CAACc,UAAU,CAACC,IAAX,CAAgBlB,cAAc,CAAC,IAAD,CAA9B,CAAD,CADT,EACkDC,GAAG,CAAC,YAAY;AAChE;AACAwB,MAAAA,OAAO,CAACC,KAAR,CAAc,mBAAmBC,MAAnB,CAA0Bb,IAA1B,EAAgC,2BAAhC,EAA6Da,MAA7D,CAAoEH,WAAW,GAAG,IAAlF,EAAwF,oEAAxF,CAAd;AACD,KAHoD,CADrD,EAIIL,SAJJ;AAKD;AACF","sourcesContent":["import \"core-js/modules/es6.function.name\";\nimport { Subject, timer } from 'rxjs';\nimport { defaultIfEmpty, tap, take, takeUntil } from 'rxjs/operators';\nvar NODE_ENV = typeof window === 'undefined' && process && process.env && process.env.NODE_ENV ? process.env.NODE_ENV : ''; // returns { cancelled$, setInterceptComplete }\n\nexport default function createCancelled$(_ref) {\n  var action = _ref.action,\n      cancel$ = _ref.cancel$,\n      monitor$ = _ref.monitor$,\n      logic = _ref.logic;\n  var name = logic.name; // once action reaches bottom, filtered, nextDisp, or cancelled\n\n  var interceptComplete = false;\n\n  function setInterceptComplete() {\n    interceptComplete = true;\n  }\n\n  var cancelled$ = new Subject().pipe(take(1));\n\n  if (cancel$) {\n    cancel$.subscribe(cancelled$); // connect cancelled$ to cancel$\n\n    cancelled$.subscribe(function () {\n      if (!interceptComplete) {\n        monitor$.next({\n          action: action,\n          name: name,\n          op: 'cancelled'\n        });\n      } else {\n        // marking these different so not counted twice\n        monitor$.next({\n          action: action,\n          name: name,\n          op: 'dispCancelled'\n        });\n      }\n    });\n  }\n\n  createWarnTimeout({\n    logic: logic,\n    cancelled$: cancelled$\n  });\n  return {\n    cancelled$: cancelled$,\n    setInterceptComplete: setInterceptComplete\n  };\n}\n\nfunction createWarnTimeout(_ref2) {\n  var logic = _ref2.logic,\n      cancelled$ = _ref2.cancelled$;\n  var name = logic.name,\n      warnTimeout = logic.warnTimeout; // In non-production mode only we will setup a warning timeout that\n  // will console.error if logic has not completed by the time it fires\n  // warnTimeout can be set to 0 to disable\n\n  if (NODE_ENV !== 'production' && warnTimeout) {\n    timer(warnTimeout).pipe( // take until cancelled, errored, or completed\n    takeUntil(cancelled$.pipe(defaultIfEmpty(true))), tap(function () {\n      // eslint-disable-next-line no-console\n      console.error(\"warning: logic (\".concat(name, \") is still running after \").concat(warnTimeout / 1000, \"s, forget to call done()? For non-ending logic, set warnTimeout: 0\"));\n    })).subscribe();\n  }\n}"]},"metadata":{},"sourceType":"module"}